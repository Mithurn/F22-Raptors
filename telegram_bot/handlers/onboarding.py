from telebot.types import Message
import telebot.types as types
from services.lang_utils import get_lang_from_text
from fuzzywuzzy import process
import pandas as pd
import logging
import os
import threading
from telegram_bot.handlers.alerts import send_region_alert

WELCOME_MSGS = {
    "en": "ЁЯСЛ Hello! Welcome to KRISHI-RAKSHAK!\nPlease select your language to continue.",
    "hi": "ЁЯСЛ рдирдорд╕реНрддреЗ! KRISHI-RAKSHAK рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ!\nрдХреГрдкрдпрд╛ рдЬрд╛рд░реА рд░рдЦрдиреЗ рдХреЗ рд▓рд┐рдП рдЕрдкрдиреА рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВред",
    "ta": "ЁЯСЛ ро╡рогроХрпНроХроорпН! KRISHI-RAKSHAK-роХрпНроХрпБ ро╡ро░ро╡рпЗро▒рпНроХро┐ро▒рпЛроорпН!\nродропро╡рпБроЪрпЖропрпНродрпБ родрпКроЯро░ роЙроЩрпНроХро│рпН роорпКро┤ро┐ропрпИродрпН родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН.",
    "te": "ЁЯСЛ р░╣р░▓р▒Л! KRISHI-RAKSHAK р░Хр▒Б р░╕р▒Нр░╡р░╛р░Чр░др░В!\nр░жр░пр░Ър▒Зр░╕р░┐ р░Хр▒Кр░ир░╕р░╛р░Чр░┐р░Вр░Ър░бр░╛р░ир░┐р░Хр░┐ р░ор▒А р░нр░╛р░╖р░ир▒Б р░Ор░Вр░Ър▒Бр░Хр▒Лр░Вр░бр░┐.",
    "bn": "ЁЯСЛ рж╣рзНржпрж╛рж▓рзЛ! KRISHI-RAKSHAK-ржП рж╕рзНржмрж╛ржЧрждржо!\nржЪрж╛рж▓рж┐ржпрж╝рзЗ ржпрзЗрждрзЗ ржЖржкржирж╛рж░ ржнрж╛рж╖рж╛ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржиред"
}
LOCATION_PROMPTS = {
    "en": "ЁЯМ╛ Great! Now, please type your farm location so we can provide you with local advice and alerts. (DonтАЩt worry, you can change this anytime later.)",
    "hi": "ЁЯМ╛ рдмрдврд╝рд┐рдпрд╛! рдЕрдм рдХреГрдкрдпрд╛ рдЕрдкрдирд╛ рдЦреЗрдд рд╕реНрдерд╛рди рдЯрд╛рдЗрдк рдХрд░реЗрдВ рддрд╛рдХрд┐ рд╣рдо рдЖрдкрдХреЛ рд╕реНрдерд╛рдиреАрдп рд╕рд▓рд╛рд╣ рдФрд░ рдЕрд▓рд░реНрдЯ рджреЗ рд╕рдХреЗрдВред (рдЪрд┐рдВрддрд╛ рди рдХрд░реЗрдВ, рдЖрдк рдЗрд╕реЗ рдмрд╛рдж рдореЗрдВ рдХрднреА рднреА рдмрджрд▓ рд╕рдХрддреЗ рд╣реИрдВред)",
    "ta": "ЁЯМ╛ роЕро░рпБроорпИ! роЗрокрпНрокрпЛродрпБ роЙроЩрпНроХро│рпН рокрогрпНрогрпИ роЗроЯродрпНродрпИродрпН родроЯрпНроЯроЪрпНроЪрпБ роЪрпЖропрпНропро╡рпБроорпН, роиро╛роЩрпНроХро│рпН роЙроЩрпНроХро│рпБроХрпНроХрпБ роЙро│рпНро│рпВро░рпН роЖро▓рпЛроЪройрпИропрпБроорпН роОроЪрпНроЪро░ро┐роХрпНроХрпИроХро│рпИропрпБроорпН ро╡ро┤роЩрпНроХрпБро╡рпЛроорпН. (роХро╡ро▓рпИрокрпНрокроЯ ро╡рпЗрогрпНроЯро╛роорпН, роЗродрпИ роирпАроЩрпНроХро│рпН рокро┐ро▒роХрпБ роОрокрпНрокрпЛродрпБ ро╡рпЗрогрпНроЯрпБрооро╛ройро╛ро▓рпБроорпН рооро╛ро▒рпНро▒ро▓ро╛роорпН.)",
    "te": "ЁЯМ╛ р░Чр▒Кр░кр▒Нр░кр░жр░┐! р░Зр░кр▒Нр░кр▒Бр░бр▒Б р░жр░пр░Ър▒Зр░╕р░┐ р░ор▒А р░╡р▒Нр░пр░╡р░╕р░╛р░п р░╕р▒Нр░ер░▓р░╛р░ир▒Нр░ир░┐ р░Яр▒Ир░кр▒Н р░Ър▒Зр░пр░Вр░бр░┐, р░ор▒Зр░ор▒Б р░ор▒Ар░Хр▒Б р░╕р▒Нр░ер░╛р░ир░┐р░Х р░╕р░▓р░╣р░╛р░▓р▒Б р░ор░░р░┐р░пр▒Б р░╣р▒Жр░Ър▒Нр░Ър░░р░┐р░Хр░▓р▒Б р░Зр░╕р▒Нр░др░╛р░ор▒Б. (р░Ор░Яр▒Бр░╡р░Вр░Яр░┐ р░Жр░Вр░жр▒Лр░│р░и р░Ер░╡р░╕р░░р░В р░▓р▒Зр░жр▒Б, р░ор▒Ар░░р▒Б р░жр▒Ар░ир▒Нр░ир░┐ р░Ор░кр▒Нр░кр▒Бр░бр▒Ир░ир░╛ р░ор░╛р░░р▒Нр░Ър░╡р░Ър▒Нр░Ър▒Б.)",
    "bn": "ЁЯМ╛ ржжрж╛рж░рзБржи! ржПржЦржи, ржжржпрж╝рж╛ ржХрж░рзЗ ржЖржкржирж╛рж░ ржЦрж╛ржорж╛рж░рзЗрж░ ржЕржмрж╕рзНржерж╛ржи ржЯрж╛ржЗржк ржХрж░рзБржи ржпрж╛рждрзЗ ржЖржорж░рж╛ ржЖржкржирж╛ржХрзЗ рж╕рзНржерж╛ржирзАржпрж╝ ржкрж░рж╛ржорж░рзНрж╢ ржПржмржВ рж╕рждрж░рзНржХрждрж╛ ржжрж┐рждрзЗ ржкрж╛рж░рж┐ред (ржЪрж┐ржирзНрждрж╛ ржХрж░ржмрзЗржи ржирж╛, ржЖржкржирж┐ ржПржЯрж┐ ржкрж░рзЗ ржпрзЗржХрзЛржирзЛ рж╕ржоржпрж╝ ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рждрзЗ ржкрж╛рж░рзЗржиред)"
}
LOCATION_CONFIRMED_MSGS = {
    "en": "ЁЯУН Location confirmed!\nYouтАЩve set your location as {location}.\nWe will now send you region-specific farming alerts and advice.\nЁЯМ╛ You can change this anytime using /location.",
    "hi": "ЁЯУН рд╕реНрдерд╛рди рдХреА рдкреБрд╖реНрдЯрд┐ рд╣реЛ рдЧрдИ!\nрдЖрдкрдиреЗ рдЕрдкрдирд╛ рд╕реНрдерд╛рди {location} рд╕реЗрдЯ рдХрд┐рдпрд╛ рд╣реИред\nрдЕрдм рд╣рдо рдЖрдкрдХреЛ рдХреНрд╖реЗрддреНрд░-рд╡рд┐рд╢рд┐рд╖реНрдЯ рдХреГрд╖рд┐ рдЕрд▓рд░реНрдЯ рдФрд░ рд╕рд▓рд╛рд╣ рднреЗрдЬреЗрдВрдЧреЗред\nЁЯМ╛ рдЖрдк рдЗрд╕реЗ рдХрднреА рднреА /change_location рд╕реЗ рдмрджрд▓ рд╕рдХрддреЗ рд╣реИрдВред",
    "ta": "ЁЯУН роЗроЯроорпН роЙро▒рпБродро┐рокрпНрокроЯрпБродрпНродрокрпНрокроЯрпНроЯродрпБ!\nроирпАроЩрпНроХро│рпН роЙроЩрпНроХро│рпН роЗроЯродрпНродрпИ {location} роОрой роЕроорпИродрпНродрпБро│рпНро│рпАро░рпНроХро│рпН.\nроЗрокрпНрокрпЛродрпБ роЙроЩрпНроХро│рпН рокроХрпБродро┐ропро┐ро▓рпН ро╡ро┐ро╡роЪро╛роп роОроЪрпНроЪро░ро┐роХрпНроХрпИроХро│рпН рооро▒рпНро▒рпБроорпН роЖро▓рпЛроЪройрпИроХро│рпН роЕройрпБрокрпНрокрокрпНрокроЯрпБроорпН.\nЁЯМ╛ /change_location роорпВро▓роорпН роОрокрпНрокрпЛродрпБ ро╡рпЗрогрпНроЯрпБрооро╛ройро╛ро▓рпБроорпН рооро╛ро▒рпНро▒ро▓ро╛роорпН.",
    "te": "ЁЯУН р░╕р▒Нр░ер░▓р░В р░ир░┐р░░р▒Нр░зр░╛р░░р░┐р░Вр░Ър░мр░бр░┐р░Вр░жр░┐!\nр░ор▒Ар░░р▒Б р░ор▒А р░╕р▒Нр░ер░▓р░╛р░ир▒Нр░ир░┐ {location} р░Чр░╛ р░╕р▒Жр░Яр▒Н р░Ър▒Зр░╕р▒Бр░Хр▒Бр░ир▒Нр░ир░╛р░░р▒Б.\nр░Зр░кр▒Нр░кр▒Бр░бр▒Б р░ор▒А р░кр▒Нр░░р░╛р░Вр░др░╛р░ир░┐р░Хр░┐ р░╕р░Вр░мр░Вр░зр░┐р░Вр░Ър░┐р░и р░╡р▒Нр░пр░╡р░╕р░╛р░п р░╣р▒Жр░Ър▒Нр░Ър░░р░┐р░Хр░▓р▒Б р░ор░░р░┐р░пр▒Б р░╕р░▓р░╣р░╛р░▓р▒Б р░кр░Вр░кр░мр░бр░др░╛р░пр░┐.\nЁЯМ╛ р░ор▒Ар░░р▒Б р░жр▒Ар░ир▒Нр░ир░┐ р░Ор░кр▒Нр░кр▒Бр░бр▒Ир░ир░╛ /change_location р░жр▒Нр░╡р░╛р░░р░╛ р░ор░╛р░░р▒Нр░Ър░╡р░Ър▒Нр░Ър▒Б.",
    "bn": "ЁЯУН ржЕржмрж╕рзНржерж╛ржи ржирж┐рж╢рзНржЪрж┐ржд рж╣ржпрж╝рзЗржЫрзЗ!\nржЖржкржирж┐ ржЖржкржирж╛рж░ ржЕржмрж╕рзНржерж╛ржи {location} рж╣рж┐рж╕рж╛ржмрзЗ рж╕рзЗржЯ ржХрж░рзЗржЫрзЗржиред\nржПржЦржи ржЖржорж░рж╛ ржЖржкржирж╛ржХрзЗ ржЕржЮрзНржЪрж▓-ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржХрзГрж╖рж┐ рж╕рждрж░рзНржХрждрж╛ ржПржмржВ ржкрж░рж╛ржорж░рзНрж╢ ржкрж╛ржарж╛ржмред\nЁЯМ╛ ржЖржкржирж┐ ржПржЯрж┐ /change_location ржжрж┐ржпрж╝рзЗ ржпрзЗржХрзЛржирзЛ рж╕ржоржпрж╝ ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рждрзЗ ржкрж╛рж░рзЗржиред"
}

LANGUAGE_OPTIONS = ["English", "рд╣рд┐рдиреНрджреА", "родрооро┐ро┤рпН", "р░др▒Жр░▓р▒Бр░Чр▒Б", "ржмрж╛ржВрж▓рж╛"]

ADMIN_USER_ID = int(os.getenv("ADMIN_USER_ID", "0"))

# Helper to check onboarding
def is_onboarded(user_data, user_id):
    info = user_data.get(user_id, {})
    return info.get("language") and info.get("location") and info.get("onboarded")

def confirm_and_set_location(user_id: str, canonical_region: str, user_data, save_user_data, bot):
    user_data[user_id]["location"] = canonical_region
    user_data[user_id]["alerts"] = True
    user_data[user_id]["onboarded"] = True
    user_data[user_id]["waiting_for_location"] = False
    save_user_data(user_data)
    # Confirmation message
    bot.reply_to(
        bot._get_last_message(user_id),
        f"тЬЕ Your location has been set to {canonical_region}. You will now start receiving region alerts."
    )
    # Start region alert timer
    def send_alert():
        info = user_data.get(user_id, {})
        if info.get("alerts", True):
            send_region_alert(bot, user_id, info, ADMIN_USER_ID)
        threading.Timer(30.0, send_alert).start()
    threading.Timer(30.0, send_alert).start()

def start_region_alert_timer(user_id, user_data, bot, admin_id, interval=30):
    import threading
    from telegram_bot.handlers.alerts import send_region_alert
    def send_alert():
        info = user_data.get(user_id, {})
        if not info.get("alerts", True):
            print(f"[DEBUG] Alerts stopped for user {user_id}, timer will not send.")
            return  # Do not send if alerts are off
        send_region_alert(bot, user_id, info, admin_id)
    threading.Timer(interval, send_alert).start()

def register_onboarding_handlers(bot, user_data, save_user_data):
    @bot.message_handler(commands=['start'])
    def send_welcome(message: Message):
        user_id = str(message.chat.id)
        info = user_data.get(user_id, {})
        lang = info.get("language", "en")
        if is_onboarded(user_data, user_id):
            bot.send_message(message.chat.id, "тЬЕ You are already onboarded! Use /help to see available commands.")
            return
        # Always force language selection if not set
        if not info.get("language"):
            kb = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
            kb.add(*LANGUAGE_OPTIONS)
            msg = WELCOME_MSGS.get(lang, WELCOME_MSGS["en"])
            bot.send_message(message.chat.id, msg, reply_markup=kb)
            return
        # Always force location selection if not set
        if not info.get("location"):
            prompt = LOCATION_PROMPTS.get(lang, LOCATION_PROMPTS["en"])
            bot.send_message(message.chat.id, prompt)
            return
        # If both are set but onboarding is not, set it now
            user_data[user_id]["onboarded"] = True
            save_user_data(user_data)
        # No onboarding complete message here; confirmation is sent after location

    @bot.message_handler(func=lambda msg: msg.text in LANGUAGE_OPTIONS)
    def save_language(message: Message):
        user_id = str(message.chat.id)
        lang_code = get_lang_from_text(message.text)
        user_data[user_id] = user_data.get(user_id, {})
        user_data[user_id]["language"] = lang_code
        user_data[user_id]["onboarded"] = False
        user_data[user_id]["location"] = None
        user_data[user_id]["waiting_for_location"] = True
        save_user_data(user_data)
        print(f"[DEBUG] [onboarding] After language set: {user_data[user_id]}")
        bot.send_message(message.chat.id, f"тЬЕ Language set to {message.text}")
        prompt = LOCATION_PROMPTS.get(lang_code, LOCATION_PROMPTS["en"])
        bot.send_message(message.chat.id, prompt)

    # Remove duplicate location handlers and use only one clean handler for location input
    @bot.message_handler(func=lambda msg: user_data.get(str(msg.chat.id), {}).get("waiting_for_location", False) and msg.text and not msg.text.startswith("/"))
    def save_location(message: Message):
        user_id = str(message.chat.id)
        lang = user_data[user_id].get("language", "en")
        location = message.text.strip()
        csv_path = f"backend/DATASETS/risk_data_{lang}.csv"
        try:
            import pandas as pd
            from fuzzywuzzy import process
            df = pd.read_csv(csv_path)
            regions = df["Region"].astype(str).tolist()
            regions_norm = [r.strip().lower() for r in regions]
            match, score = process.extractOne(location.lower(), regions_norm)
            if score >= 70:
                idx = regions_norm.index(match)
                canonical_region = regions[idx]
                user_data[user_id]["location"] = canonical_region
                user_data[user_id]["onboarded"] = True
                user_data[user_id]["waiting_for_location"] = False  # тЬЕ set and save immediately
                user_data[user_id]["alerts"] = True  # Always enable alerts after onboarding
                save_user_data(user_data)
                print(f"[DEBUG] waiting_for_location: {user_data[user_id]['waiting_for_location']}")
                bot.reply_to(message, f"тЬЕ Your location has been set to {canonical_region}. You will now start receiving region alerts.")
                # Start alerts after confirming
                ADMIN_USER_ID = int(os.getenv("ADMIN_USER_ID", "0"))
                start_region_alert_timer(user_id, user_data, bot, ADMIN_USER_ID)
            else:
                idx = regions_norm.index(match)
                suggestion = regions[idx]
                bot.reply_to(message, f"тЭМ Location not found. Did you mean: {suggestion}? Available regions include: {', '.join(regions[:5])} ...")
        except Exception as e:
            bot.reply_to(message, "тЭМ Could not load region data. Please try again later.")
            import logging
            logging.error(f"CSV load error: {e}")

    @bot.message_handler(commands=['location'])
    def ask_location(message: Message):
        user_id = str(message.chat.id)
        user_data[user_id] = user_data.get(user_id, {})
        user_data[user_id]["waiting_for_location"] = True
        save_user_data(user_data)
        print(f"[DEBUG] [onboarding] Waiting for location for {user_id}")
        bot.reply_to(message, "ЁЯУН Please type your farm location (district or region):")

    @bot.message_handler(commands=['myalerts'])
    def start_alerts(message: Message):
        user_id = str(message.chat.id)
        user_data[user_id] = user_data.get(user_id, {})
        user_data[user_id]["alerts"] = True
        save_user_data(user_data)
        bot.reply_to(message, "тЬЕ You will now receive region alerts as per your preferences.")
        ADMIN_USER_ID = int(os.getenv("ADMIN_USER_ID", "0"))
        start_region_alert_timer(user_id, user_data, bot, ADMIN_USER_ID)

    @bot.message_handler(commands=['stopalerts'])
    def stop_alerts(message: Message):
        user_id = str(message.chat.id)
        user_data[user_id] = user_data.get(user_id, {})
        user_data[user_id]["alerts"] = False
        save_user_data(user_data)
        bot.reply_to(message, "ЁЯФХ You will no longer receive alerts. You can enable them anytime with /myalerts.")

    # Block all other actions until onboarding is complete, but allow commands
    @bot.message_handler(func=lambda msg: not is_onboarded(user_data, str(msg.chat.id)) and not (getattr(msg, 'text', None) and msg.text.startswith('/')))
    def block_until_onboarded(message: Message):
        user_id = str(message.chat.id)
        info = user_data.get(user_id, {})
        if not info.get("language"):
            kb = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
            kb.add(*LANGUAGE_OPTIONS)
            bot.send_message(message.chat.id, "ЁЯМР Please select your language:", reply_markup=kb)
        elif not info.get("location"):
            bot.send_message(message.chat.id, "ЁЯУН Please tell me your farm location (district or region) in the format: Location: <your location>") 

    # Block all commands except onboarding-related ones until onboarding is complete
    @bot.message_handler(func=lambda msg: not is_onboarded(user_data, str(msg.chat.id)) and getattr(msg, 'text', None) and msg.text.startswith('/') and msg.text.split()[0] not in ['/start', '/help', '/language', '/location'])
    def block_commands_until_onboarded(message: Message):
        bot.reply_to(message, "ЁЯЪл Please complete onboarding (set language and location) before using this command.") 