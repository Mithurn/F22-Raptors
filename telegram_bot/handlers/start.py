from telebot.types import Message
import sys
import os
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "../..")))
import pandas as pd
from telegram_bot.user_persistence import save_user_data
import telebot.types as types
from services.lang_utils import get_lang_from_text, set_user_lang
from fuzzywuzzy import process
import time

# Translation dictionaries
WELCOME_MSGS = {
    "en": "ЁЯСЛ Hello! Welcome to KRISHI-RAKSHAK!\nPlease select your language to continue.",
    "hi": "ЁЯСЛ рдирдорд╕реНрддреЗ! KRISHI-RAKSHAK рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ!\nрдХреГрдкрдпрд╛ рдЬрд╛рд░реА рд░рдЦрдиреЗ рдХреЗ рд▓рд┐рдП рдЕрдкрдиреА рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВред",
    "ta": "ЁЯСЛ ро╡рогроХрпНроХроорпН! KRISHI-RAKSHAK-роХрпНроХрпБ ро╡ро░ро╡рпЗро▒рпНроХро┐ро▒рпЛроорпН!\nродропро╡рпБроЪрпЖропрпНродрпБ родрпКроЯро░ роЙроЩрпНроХро│рпН роорпКро┤ро┐ропрпИродрпН родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН.",
    "te": "ЁЯСЛ р░╣р░▓р▒Л! KRISHI-RAKSHAK р░Хр▒Б р░╕р▒Нр░╡р░╛р░Чр░др░В!\nр░жр░пр░Ър▒Зр░╕р░┐ р░Хр▒Кр░ир░╕р░╛р░Чр░┐р░Вр░Ър░бр░╛р░ир░┐р░Хр░┐ р░ор▒А р░нр░╛р░╖р░ир▒Б р░Ор░Вр░Ър▒Бр░Хр▒Лр░Вр░бр░┐.",
    "bn": "ЁЯСЛ рж╣рзНржпрж╛рж▓рзЛ! KRISHI-RAKSHAK-ржП рж╕рзНржмрж╛ржЧрждржо!\nржЪрж╛рж▓рж┐ржпрж╝рзЗ ржпрзЗрждрзЗ ржЖржкржирж╛рж░ ржнрж╛рж╖рж╛ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржиред"
}
LOCATION_PROMPTS = {
    "en": "ЁЯМ╛ Great! Now, please type your farm location so we can provide you with local advice and alerts. (DonтАЩt worry, you can change this anytime later.)",
    "hi": "ЁЯМ╛ рдмрдврд╝рд┐рдпрд╛! рдЕрдм рдХреГрдкрдпрд╛ рдЕрдкрдирд╛ рдЦреЗрдд рд╕реНрдерд╛рди рдЯрд╛рдЗрдк рдХрд░реЗрдВ рддрд╛рдХрд┐ рд╣рдо рдЖрдкрдХреЛ рд╕реНрдерд╛рдиреАрдп рд╕рд▓рд╛рд╣ рдФрд░ рдЕрд▓рд░реНрдЯ рджреЗ рд╕рдХреЗрдВред (рдЪрд┐рдВрддрд╛ рди рдХрд░реЗрдВ, рдЖрдк рдЗрд╕реЗ рдмрд╛рдж рдореЗрдВ рдХрднреА рднреА рдмрджрд▓ рд╕рдХрддреЗ рд╣реИрдВред)",
    "ta": "ЁЯМ╛ роЕро░рпБроорпИ! роЗрокрпНрокрпЛродрпБ роЙроЩрпНроХро│рпН рокрогрпНрогрпИ роЗроЯродрпНродрпИродрпН родроЯрпНроЯроЪрпНроЪрпБ роЪрпЖропрпНропро╡рпБроорпН, роиро╛роЩрпНроХро│рпН роЙроЩрпНроХро│рпБроХрпНроХрпБ роЙро│рпНро│рпВро░рпН роЖро▓рпЛроЪройрпИропрпБроорпН роОроЪрпНроЪро░ро┐роХрпНроХрпИроХро│рпИропрпБроорпН ро╡ро┤роЩрпНроХрпБро╡рпЛроорпН. (роХро╡ро▓рпИрокрпНрокроЯ ро╡рпЗрогрпНроЯро╛роорпН, роЗродрпИ роирпАроЩрпНроХро│рпН рокро┐ро▒роХрпБ роОрокрпНрокрпЛродрпБ ро╡рпЗрогрпНроЯрпБрооро╛ройро╛ро▓рпБроорпН рооро╛ро▒рпНро▒ро▓ро╛роорпН.)",
    "te": "ЁЯМ╛ р░Чр▒Кр░кр▒Нр░кр░жр░┐! р░Зр░кр▒Нр░кр▒Бр░бр▒Б р░жр░пр░Ър▒Зр░╕р░┐ р░ор▒А р░╡р▒Нр░пр░╡р░╕р░╛р░п р░╕р▒Нр░ер░▓р░╛р░ир▒Нр░ир░┐ р░Яр▒Ир░кр▒Н р░Ър▒Зр░пр░Вр░бр░┐, р░ор▒Зр░ор▒Б р░ор▒Ар░Хр▒Б р░╕р▒Нр░ер░╛р░ир░┐р░Х р░╕р░▓р░╣р░╛р░▓р▒Б р░ор░░р░┐р░пр▒Б р░╣р▒Жр░Ър▒Нр░Ър░░р░┐р░Хр░▓р▒Б р░Зр░╕р▒Нр░др░╛р░ор▒Б. (р░Ор░Яр▒Бр░╡р░Вр░Яр░┐ р░Жр░Вр░жр▒Лр░│р░и р░Ер░╡р░╕р░░р░В р░▓р▒Зр░жр▒Б, р░ор▒Ар░░р▒Б р░жр▒Ар░ир▒Нр░ир░┐ р░Ор░кр▒Нр░кр▒Бр░бр▒Ир░ир░╛ р░ор░╛р░░р▒Нр░Ър░╡р░Ър▒Нр░Ър▒Б.)",
    "bn": "ЁЯМ╛ ржжрж╛рж░рзБржи! ржПржЦржи, ржжржпрж╝рж╛ ржХрж░рзЗ ржЖржкржирж╛рж░ ржЦрж╛ржорж╛рж░рзЗрж░ ржЕржмрж╕рзНржерж╛ржи ржЯрж╛ржЗржк ржХрж░рзБржи ржпрж╛рждрзЗ ржЖржорж░рж╛ ржЖржкржирж╛ржХрзЗ рж╕рзНржерж╛ржирзАржпрж╝ ржкрж░рж╛ржорж░рзНрж╢ ржПржмржВ рж╕рждрж░рзНржХрждрж╛ ржжрж┐рждрзЗ ржкрж╛рж░рж┐ред (ржЪрж┐ржирзНрждрж╛ ржХрж░ржмрзЗржи ржирж╛, ржЖржкржирж┐ ржПржЯрж┐ ржкрж░рзЗ ржпрзЗржХрзЛржирзЛ рж╕ржоржпрж╝ ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рждрзЗ ржкрж╛рж░рзЗржиред)"
}
LOCATION_CONFIRMED_MSGS = {
    "en": "ЁЯУН Location confirmed!\nYouтАЩve set your location as {location}.\nWe will now send you region-specific farming alerts and advice.\nЁЯМ╛ You can change this anytime using /location.",
    "hi": "ЁЯУН рд╕реНрдерд╛рди рдХреА рдкреБрд╖реНрдЯрд┐ рд╣реЛ рдЧрдИ!\nрдЖрдкрдиреЗ рдЕрдкрдирд╛ рд╕реНрдерд╛рди {location} рд╕реЗрдЯ рдХрд┐рдпрд╛ рд╣реИред\nрдЕрдм рд╣рдо рдЖрдкрдХреЛ рдХреНрд╖реЗрддреНрд░-рд╡рд┐рд╢рд┐рд╖реНрдЯ рдХреГрд╖рд┐ рдЕрд▓рд░реНрдЯ рдФрд░ рд╕рд▓рд╛рд╣ рднреЗрдЬреЗрдВрдЧреЗред\nЁЯМ╛ рдЖрдк рдЗрд╕реЗ рдХрднреА рднреА /change_location рд╕реЗ рдмрджрд▓ рд╕рдХрддреЗ рд╣реИрдВред",
    "ta": "ЁЯУН роЗроЯроорпН роЙро▒рпБродро┐рокрпНрокроЯрпБродрпНродрокрпНрокроЯрпНроЯродрпБ!\nроирпАроЩрпНроХро│рпН роЙроЩрпНроХро│рпН роЗроЯродрпНродрпИ {location} роОрой роЕроорпИродрпНродрпБро│рпНро│рпАро░рпНроХро│рпН.\nроЗрокрпНрокрпЛродрпБ роЙроЩрпНроХро│рпН рокроХрпБродро┐ропро┐ро▓рпН ро╡ро┐ро╡роЪро╛роп роОроЪрпНроЪро░ро┐роХрпНроХрпИроХро│рпН рооро▒рпНро▒рпБроорпН роЖро▓рпЛроЪройрпИроХро│рпН роЕройрпБрокрпНрокрокрпНрокроЯрпБроорпН.\nЁЯМ╛ /change_location роорпВро▓роорпН роОрокрпНрокрпЛродрпБ ро╡рпЗрогрпНроЯрпБрооро╛ройро╛ро▓рпБроорпН рооро╛ро▒рпНро▒ро▓ро╛роорпН.",
    "te": "ЁЯУН р░╕р▒Нр░ер░╛р░ир░В р░ир░┐р░░р▒Нр░зр░╛р░░р░┐р░Вр░Ър░мр░бр░┐р░Вр░жр░┐!\nр░ор▒Ар░░р▒Б р░ор▒А р░╕р▒Нр░ер░╛р░ир░╛р░ир▒Нр░ир░┐ {location} р░Чр░╛ р░╕р▒Жр░Яр▒Н р░Ър▒Зр░╕р░╛р░░р▒Б.\nр░ор▒Зр░ор▒Б р░Зр░кр▒Нр░кр▒Бр░бр▒Б р░ор▒А р░кр▒Нр░░р░╛р░Вр░др░╛р░ир░┐р░Хр░┐ р░кр▒Нр░░р░др▒Нр░пр▒Зр░Хр░ор▒Ир░и р░╡р▒Нр░пр░╡р░╕р░╛р░п р░╣р▒Жр░Ър▒Нр░Ър░░р░┐р░Хр░▓р▒Б р░ор░░р░┐р░пр▒Б р░╕р░▓р░╣р░╛р░▓р▒Б р░кр░Вр░кр░┐р░╕р▒Нр░др░╛р░ор▒Б.\nЁЯМ╛ р░ор▒Ар░░р▒Б р░жр▒Ар░ир▒Нр░ир░┐ р░Ор░кр▒Нр░кр▒Бр░бр▒Ир░ир░╛ /change_location р░жр▒Нр░╡р░╛р░░р░╛ р░ор░╛р░░р▒Нр░Ър░╡р░Ър▒Нр░Ър▒Б.",
    "bn": "ЁЯУН ржЕржмрж╕рзНржерж╛ржи ржирж┐рж╢рзНржЪрж┐ржд рж╣ржпрж╝рзЗржЫрзЗ!\nржЖржкржирж┐ ржЖржкржирж╛рж░ ржЕржмрж╕рзНржерж╛ржи {location} рж╣рж┐рж╕рзЗржмрзЗ рж╕рзЗржЯ ржХрж░рзЗржЫрзЗржиред\nржПржЦржи ржЖржорж░рж╛ ржЖржкржирж╛ржХрзЗ ржЕржЮрзНржЪрж▓ржнрж┐рждрзНрждрж┐ржХ ржХрзГрж╖рж┐ рж╕рждрж░рзНржХрждрж╛ ржУ ржкрж░рж╛ржорж░рзНрж╢ ржкрж╛ржарж╛ржмрзЛред\nЁЯМ╛ ржЖржкржирж┐ ржПржЯрж┐ /change_location ржжрж┐ржпрж╝рзЗ ржпрзЗржХрзЛржирзЛ рж╕ржоржпрж╝ ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рждрзЗ ржкрж╛рж░рзЗржиред"
}
LOCATION_NOT_FOUND_MSGS = {
    "en": "ЁЯШЕ Sorry, we couldnтАЩt find that location. Did you mean one of these?\nPlease type the correct name or select from the suggestions below.",
    "hi": "ЁЯШЕ рдХреНрд╖рдорд╛ рдХрд░реЗрдВ, рд╣рдо рдЙрд╕ рд╕реНрдерд╛рди рдХреЛ рдирд╣реАрдВ рдвреВрдВрдв рд╕рдХреЗред рдХреНрдпрд╛ рдЖрдк рдЗрдирдореЗрдВ рд╕реЗ рдХрд┐рд╕реА рдПрдХ рдХреЛ рдХрд╣рдирд╛ рдЪрд╛рд╣ рд░рд╣реЗ рдереЗ?\nрдХреГрдкрдпрд╛ рд╕рд╣реА рдирд╛рдо рдЯрд╛рдЗрдк рдХрд░реЗрдВ рдпрд╛ рдиреАрдЪреЗ рджрд┐рдП рдЧрдП рд╕реБрдЭрд╛рд╡реЛрдВ рдореЗрдВ рд╕реЗ рдЪреБрдиреЗрдВред",
    "ta": "ЁЯШЕ рооройрпНройро┐роХрпНроХро╡рпБроорпН, роЕроирпНрод роЗроЯродрпНродрпИ роХрогрпНроЯрпБрокро┐роЯро┐роХрпНроХ роорпБроЯро┐ропро╡ро┐ро▓рпНро▓рпИ. роирпАроЩрпНроХро│рпН роЗродрпИ роиро┐ройрпИродрпНродрпАро░рпНроХро│ро╛?\nроЪро░ро┐ропро╛рой рокрпЖропро░рпИ роЙро│рпНро│ро┐роЯро╡рпБроорпН роЕро▓рпНро▓родрпБ роХрпАро┤рпЗ роЙро│рпНро│ рокро░ро┐роирпНродрпБро░рпИроХро│ро┐ро▓рпН роТройрпНро▒рпИродрпН родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН.",
    "te": "ЁЯШЕ р░Хр▒Нр░╖р░ор░┐р░Вр░Ър░Вр░бр░┐, р░Ж р░кр▒Нр░░р░жр▒Зр░╢р░╛р░ир▒Нр░ир░┐ р░Хр░ир▒Бр░Чр▒Кр░ир░▓р▒Зр░Хр░кр▒Лр░пр░╛р░В. р░ор▒Ар░░р▒Б р░╡р▒Ар░Яр░┐р░▓р▒Л р░Пр░жр▒Ир░ир░╛ р░Йр░жр▒Нр░жр▒Зр░╢р░┐р░Вр░Ър░╛р░░р░╛?\nр░жр░пр░Ър▒Зр░╕р░┐ р░╕р░░р▒Ир░и р░кр▒Зр░░р▒Бр░ир▒Б р░Яр▒Ир░кр▒Н р░Ър▒Зр░пр░Вр░бр░┐ р░▓р▒Зр░жр░╛ р░Хр▒Нр░░р░┐р░Вр░жр░┐ р░╕р▒Вр░Ър░ир░▓ р░ир▒Бр░Вр░бр░┐ р░Ор░Вр░Ър▒Бр░Хр▒Лр░Вр░бр░┐.",
    "bn": "ЁЯШЕ ржжрзБржГржЦрж┐ржд, ржЖржорж░рж╛ рж╕рзЗржЗ ржЕржмрж╕рзНржерж╛ржиржЯрж┐ ржЦрзБржБржЬрзЗ ржкрж╛ржЗржирж┐ред ржЖржкржирж┐ ржХрж┐ ржПрж░ ржоржзрзНржпрзЗ ржХрзЛржиржЯрж┐ ржмрзЛржЭрж╛рждрзЗ ржЪрзЗржпрж╝рзЗржЫрж┐рж▓рзЗржи?\nрж╕ржарж┐ржХ ржирж╛ржо ржЯрж╛ржЗржк ржХрж░рзБржи ржмрж╛ ржирж┐ржЪрзЗрж░ ржкрж░рж╛ржорж░рзНрж╢ ржерзЗржХрзЗ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи."
}
HELP_MSGS = {
    "en": "*ЁЯЫа How to use this bot:*\n\n1я╕ПтГг /start тАФ Set up your profile and get started\n2я╕ПтГг /language тАФ Change your language anytime\n3я╕ПтГг /location тАФ Set or update your farm location\n4я╕ПтГг /myalerts тАФ Manage automatic region alerts\n5я╕ПтГг /stopalerts тАФ Stop receiving alerts\n6я╕ПтГг /status тАФ View your current settings\n7я╕ПтГг /about тАФ Learn about this bot\n8я╕ПтГг ЁЯУ╖ *Send a crop photo* тАФ IтАЩll detect diseases and suggest remedies\n9я╕ПтГг ЁЯТм *Type your farming question* тАФ Get expert advice in your language\n\nЁЯФФ *Alerts are currently sent every 10 seconds (for demo).*\n\nЁЯМР Supported languages: English, рд╣рд┐рдВрджреА, родрооро┐ро┤рпН, р░др▒Жр░▓р▒Бр░Чр▒Б, ржмрж╛ржВрж▓рж╛.\n\nЁЯТб If you need help anytime, just type /help!",
    "hi": "*ЁЯЫа рдЗрд╕ рдмреЛрдЯ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХреИрд╕реЗ рдХрд░реЗрдВ:*\n\n1я╕ПтГг /start тАФ рдЕрдкрдиреА рдкреНрд░реЛрдлрд╝рд╛рдЗрд▓ рд╕реЗрдЯ рдХрд░реЗрдВ рдФрд░ рд╢реБрд░реВ рдХрд░реЗрдВ\n2я╕ПтГг /language тАФ рдХрднреА рднреА рдЕрдкрдиреА рднрд╛рд╖рд╛ рдмрджрд▓реЗрдВ\n3я╕ПтГг /location тАФ рдЕрдкрдирд╛ рдЦреЗрдд рд╕реНрдерд╛рди рд╕реЗрдЯ рдпрд╛ рдЕрдкрдбреЗрдЯ рдХрд░реЗрдВ\n4я╕ПтГг /myalerts тАФ рдХреНрд╖реЗрддреНрд░реАрдп рдЕрд▓рд░реНрдЯ рдкреНрд░рдмрдВрдзрд┐рдд рдХрд░реЗрдВ\n5я╕ПтГг /stopalerts тАФ рдЕрд▓рд░реНрдЯ рдмрдВрдж рдХрд░реЗрдВ\n6я╕ПтГг /status тАФ рдЕрдкрдиреА рд╡рд░реНрддрдорд╛рди рд╕реЗрдЯрд┐рдВрдЧреНрд╕ рджреЗрдЦреЗрдВ\n7я╕ПтГг /about тАФ рдЗрд╕ рдмреЛрдЯ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдЬрд╛рдиреЗрдВ\n8я╕ПтГг ЁЯУ╖ *рдлрд╕рд▓ рдХреА рдлреЛрдЯреЛ рднреЗрдЬреЗрдВ* тАФ рдореИрдВ рд░реЛрдЧ рдкрд╣рдЪрд╛рдиреВрдВрдЧрд╛ рдФрд░ рд╕реБрдЭрд╛рд╡ рджреВрдВрдЧрд╛\n9я╕ПтГг ЁЯТм *рдЕрдкрдирд╛ рдХреГрд╖рд┐ рдкреНрд░рд╢реНрди рдЯрд╛рдЗрдк рдХрд░реЗрдВ* тАФ рдЕрдкрдиреА рднрд╛рд╖рд╛ рдореЗрдВ рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ рд╕рд▓рд╛рд╣ рдкрд╛рдПрдВ\n\nЁЯФФ *рдЕрд▓рд░реНрдЯ рд╣рд░ 10 рд╕реЗрдХрдВрдб рдореЗрдВ рднреЗрдЬреЗ рдЬрд╛рддреЗ рд╣реИрдВ (рдбреЗрдореЛ).*\n\nЁЯМР рд╕рдорд░реНрдерд┐рдд рднрд╛рд╖рд╛рдПрдБ: English, рд╣рд┐рдВрджреА, родрооро┐ро┤рпН, р░др▒Жр░▓р▒Бр░Чр▒Б, ржмрж╛ржВрж▓рж╛.\n\nЁЯТб рдХрднреА рднреА /help рдЯрд╛рдЗрдк рдХрд░реЗрдВ!",
    "ta": "*ЁЯЫа роЗроирпНрод рокро╛роЯрпНроЯрпИ роОрокрпНрокроЯро┐ рокропройрпНрокроЯрпБродрпНродрпБро╡родрпБ:*\n\n1я╕ПтГг /start тАФ роЙроЩрпНроХро│рпН роЪрпБропро╡ро┐ро╡ро░родрпНродрпИ роЕроорпИроХрпНроХро╡рпБроорпН родрпКроЯроЩрпНроХро╡рпБроорпН\n2я╕ПтГг /language тАФ роЙроЩрпНроХро│рпН роорпКро┤ро┐ропрпИ роОрокрпНрокрпЛродрпБ ро╡рпЗрогрпНроЯрпБрооро╛ройро╛ро▓рпБроорпН рооро╛ро▒рпНро▒ро╡рпБроорпН\n3я╕ПтГг /location тАФ роЙроЩрпНроХро│рпН рокрогрпНрогрпИ роЗроЯродрпНродрпИ роЕроорпИроХрпНроХро╡рпБроорпН роЕро▓рпНро▓родрпБ рокрпБродрпБрокрпНрокро┐роХрпНроХро╡рпБроорпН\n4я╕ПтГг /myalerts тАФ рокроХрпБродро┐ роОроЪрпНроЪро░ро┐роХрпНроХрпИроХро│рпИ роиро┐ро░рпНро╡роХро┐роХрпНроХро╡рпБроорпН\n5я╕ПтГг /stopalerts тАФ роОроЪрпНроЪро░ро┐роХрпНроХрпИроХро│рпИ роиро┐ро▒рпБродрпНродро╡рпБроорпН\n6я╕ПтГг /status тАФ роЙроЩрпНроХро│рпН родро▒рпНрокрпЛродрпИроп роЕроорпИрокрпНрокрпБроХро│рпИрокрпН рокро╛ро░рпНроХрпНроХро╡рпБроорпН\n7я╕ПтГг /about тАФ роЗроирпНрод рокро╛роЯрпНроЯрпИрокрпН рокро▒рпНро▒ро┐ роЕро▒ро┐ропро╡рпБроорпН\n8я╕ПтГг ЁЯУ╖ *рокропро┐ро░рпН рокрпБроХрпИрокрпНрокроЯроорпН роЕройрпБрокрпНрокро╡рпБроорпН* тАФ роирпЛропрпНроХро│рпИ роХрогрпНроЯро▒ро┐роирпНродрпБ рокро░ро┐роирпНродрпБро░рпИроХро│рпИ ро╡ро┤роЩрпНроХрпБро╡рпЗройрпН\n9я╕ПтГг ЁЯТм *роЙроЩрпНроХро│рпН ро╡ро┐ро╡роЪро╛ропроХрпН роХрпЗро│рпНро╡ро┐ропрпИродрпН родроЯрпНроЯроЪрпНроЪрпБ роЪрпЖропрпНропро╡рпБроорпН* тАФ роЙроЩрпНроХро│рпН роорпКро┤ро┐ропро┐ро▓рпН роиро┐рокрпБрогро░рпН роЖро▓рпЛроЪройрпИ рокрпЖро▒ро╡рпБроорпН\n\nЁЯФФ *роОроЪрпНроЪро░ро┐роХрпНроХрпИроХро│рпН родро▒рпНрокрпЛродрпБ роТро╡рпНро╡рпКро░рпБ 10 ро╡ро┐ройро╛роЯро┐роХро│рпБроХрпНроХрпБроорпН роЕройрпБрокрпНрокрокрпНрокроЯрпБроХро┐ройрпНро▒рой (роЯрпЖроорпЛ).*\n\nЁЯМР роЖродро░ро╡рпБ роорпКро┤ро┐роХро│рпН: English, рд╣рд┐рдВрджреА, родрооро┐ро┤рпН, р░др▒Жр░▓р▒Бр░Чр▒Б, ржмрж╛ржВрж▓рж╛.\n\nЁЯТб роОрокрпНрокрпЛродрпБ ро╡рпЗрогрпНроЯрпБрооро╛ройро╛ро▓рпБроорпН /help роОройродрпН родроЯрпНроЯроЪрпНроЪрпБ роЪрпЖропрпНропро╡рпБроорпН!",
    "te": "*ЁЯЫа р░И р░мр░╛р░Яр▒НтАМр░ир▒Б р░Ор░▓р░╛ р░Йр░кр░пр▒Лр░Чр░┐р░Вр░Ър░╛р░▓р░┐:*\n\n1я╕ПтГг /start тАФ р░ор▒А р░кр▒Нр░░р▒Кр░лр▒Ир░▓р▒НтАМр░ир▒Б р░╕р▒Жр░Яр░кр▒Н р░Ър▒Зр░пр░Вр░бр░┐ р░ор░░р░┐р░пр▒Б р░кр▒Нр░░р░╛р░░р░Вр░нр░┐р░Вр░Ър░Вр░бр░┐\n2я╕ПтГг /language тАФ р░ор▒А р░нр░╛р░╖р░ир▒Б р░Ор░кр▒Нр░кр▒Бр░бр▒Ир░ир░╛ р░ор░╛р░░р▒Нр░Ър░Вр░бр░┐\n3я╕ПтГг /location тАФ р░ор▒А р░╡р▒Нр░пр░╡р░╕р░╛р░п р░╕р▒Нр░ер░▓р░╛р░ир▒Нр░ир░┐ р░╕р▒Жр░Яр░кр▒Н р░Ър▒Зр░пр░Вр░бр░┐ р░▓р▒Зр░жр░╛ р░ир░╡р▒Ар░Хр░░р░┐р░Вр░Ър░Вр░бр░┐\n4я╕ПтГг /myalerts тАФ р░кр▒Нр░░р░╛р░Вр░др▒Ар░п р░╣р▒Жр░Ър▒Нр░Ър░░р░┐р░Хр░▓р░ир▒Б р░ир░┐р░░р▒Нр░╡р░╣р░┐р░Вр░Ър░Вр░бр░┐\n5я╕ПтГг /stopalerts тАФ р░╣р▒Жр░Ър▒Нр░Ър░░р░┐р░Хр░▓р░ир▒Б р░Жр░кр░Вр░бр░┐\n6я╕ПтГг /status тАФ р░ор▒А р░кр▒Нр░░р░╕р▒Нр░др▒Бр░д р░╕р▒Жр░Яр▒Нр░Яр░┐р░Вр░Чр▒Бр░▓р░ир▒Б р░Ър▒Вр░бр░Вр░бр░┐\n7я╕ПтГг /about тАФ р░И р░мр░╛р░Яр▒Н р░Чр▒Бр░░р░┐р░Вр░Ър░┐ р░др▒Жр░▓р▒Бр░╕р▒Бр░Хр▒Лр░Вр░бр░┐\n8я╕ПтГг ЁЯУ╖ *р░кр░Вр░Я р░лр▒Лр░Яр▒Лр░ир▒Б р░кр░Вр░кр░Вр░бр░┐* тАФ р░ир▒Зр░ир▒Б р░╡р▒Нр░пр░╛р░зр▒Бр░▓р░ир▒Б р░Чр▒Бр░░р▒Нр░др░┐р░Вр░Ър░┐ р░╕р▒Вр░Ър░ир░▓р▒Б р░Зр░╕р▒Нр░др░╛р░ир▒Б\n9я╕ПтГг ЁЯТм *р░ор▒А р░╡р▒Нр░пр░╡р░╕р░╛р░п р░кр▒Нр░░р░╢р▒Нр░ир░ир▒Б р░Яр▒Ир░кр▒Н р░Ър▒Зр░пр░Вр░бр░┐* тАФ р░ор▒А р░нр░╛р░╖р░▓р▒Л р░ир░┐р░кр▒Бр░гр▒Бр░▓ р░╕р░▓р░╣р░╛ р░кр▒Кр░Вр░жр░Вр░бр░┐\n\nЁЯФФ *р░╣р▒Жр░Ър▒Нр░Ър░░р░┐р░Хр░▓р▒Б р░кр▒Нр░░р░╕р▒Нр░др▒Бр░др░В р░кр▒Нр░░р░др░┐ 10 р░╕р▒Жр░Хр░ир▒Нр░▓р░Хр▒В р░кр░Вр░кр░мр░бр░др░╛р░пр░┐ (р░бр▒Жр░ор▒Л).*\n\nЁЯМР р░ор░жр▒Нр░жр░др▒Б р░нр░╛р░╖р░▓р▒Б: English, рд╣рд┐рдВрджреА, родрооро┐ро┤рпН, р░др▒Жр░▓р▒Бр░Чр▒Б, ржмрж╛ржВрж▓рж╛.\n\nЁЯТб р░Ор░кр▒Нр░кр▒Бр░бр▒Ир░ир░╛ /help р░Яр▒Ир░кр▒Н р░Ър▒Зр░пр░Вр░бр░┐!",
    "bn": "*ЁЯЫа р░Пр░З р░мр░Яр▒Нр░Яр░┐ р░Хр▒Ар░нр░╛р░мр▒Б р░мр▒Нр░пр░╡р░╣р░╛р░░р░В р░Ър▒Зр░пр░Вр░бр░┐:*\n\n1я╕ПтГг /start тАФ р░ор▒А р░кр▒Нр░░р▒Лр░лр▒Ир░▓р▒Н р░╕р▒Жр░Яр▒Н р░Ър▒Зр░пр░Вр░бр░┐ р░ор░░р░┐р░пр▒Б р░кр▒Нр░░р░╛р░░р░Вр░нр░┐р░Вр░Ър░Вр░бр░┐\n2я╕ПтГг /language тАФ р░пр▒Кр░Хр▒Нр░Х р░П р░╕р░ор░пр░Вр░▓р▒Л р░ор▒А р░нр░╛р░╖р░ир▒Б р░ор░╛р░░р▒Нр░Ър░Вр░бр░┐\n3я╕ПтГг /location тАФ р░ор▒А р░╡р▒Нр░пр░╡р░╕р░╛р░п р░╕р▒Нр░ер░▓р░╛р░ир▒Нр░ир░┐ р░╕р▒Жр░Яр▒Н р░Ър▒Зр░пр░Вр░бр░┐ р░▓р▒Зр░жр░╛ р░ир░╡р▒Ар░Хр░░р░┐р░Вр░Ър░Вр░бр░┐\n4я╕ПтГг /myalerts тАФ р░кр▒Нр░░р░╛р░Вр░др▒Ар░п р░╣р▒Жр░Ър▒Нр░Ър░░р░┐р░Хр░▓р░ир▒Б р░ир░┐р░░р▒Нр░╡р░╣р░┐р░Вр░Ър░Вр░бр░┐\n5я╕ПтГг /stopalerts тАФ р░╣р▒Жр░Ър▒Нр░Ър░░р░┐р░Хр░▓р░ир▒Б р░Жр░кр░Вр░бр░┐\n6я╕ПтГг /status тАФ р░ор▒А р░кр▒Нр░░р░╕р▒Нр░др▒Бр░д р░╕р▒Жр░Яр▒Нр░Яр░┐р░Вр░Чр▒Бр░▓р░ир▒Б р░Ър▒Вр░бр░Вр░бр░┐\n7я╕ПтГг /about тАФ р░И р░мр░╛р░Яр▒Н р░Чр▒Бр░░р░┐р░Вр░Ър░┐ р░др▒Жр░▓р▒Бр░╕р▒Бр░Хр▒Лр░Вр░бр░┐\n8я╕ПтГг ЁЯУ╖ *р░кр░Вр░Я р░лр▒Лр░Яр▒Лр░ир▒Б р░кр░Вр░кр░Вр░бр░┐* тАФ р░ир▒Зр░ир▒Б р░╡р▒Нр░пр░╛р░зр▒Бр░▓р░ир▒Б р░Чр▒Бр░░р▒Нр░др░┐р░Вр░Ър░┐ р░╕р▒Вр░Ър░ир░▓р▒Б р░Зр░╕р▒Нр░др░╛р░ир▒Б\n9я╕ПтГг ЁЯТм *р░ор▒А р░╡р▒Нр░пр░╡р░╕р░╛р░п р░кр▒Нр░░р░╢р▒Нр░ир░ир▒Б р░Яр▒Ир░кр▒Н р░Ър▒Зр░пр░Вр░бр░┐* тАФ р░ор▒А р░нр░╛р░╖р░▓р▒Л р░ир░┐р░кр▒Бр░гр▒Бр░▓ р░╕р░▓р░╣р░╛ р░кр▒Кр░Вр░жр░Вр░бр░┐\n\nЁЯФФ *р░╣р▒Жр░Ър▒Нр░Ър░░р░┐р░Хр░▓р▒Б р░кр▒Нр░░р░╕р▒Нр░др▒Бр░др░В р░кр▒Нр░░р░др░┐ 10 р░╕р▒Жр░Хр░ир▒Нр░▓р░Хр▒В р░кр░Вр░кр░мр░бр░др░╛р░пр░┐ (р░бр▒Жр░ор▒Л).*\n\nЁЯМР р░ор░жр▒Нр░жр░др▒Б р░нр░╛р░╖р░▓р▒Б: English, рд╣рд┐рдВрджреА, родрооро┐ро┤рпН, р░др▒Жр░▓р▒Бр░Чр▒Б, ржмрж╛ржВрж▓рж╛.\n\nЁЯТб р░Ор░кр▒Нр░кр▒Бр░бр▒Ир░ир░╛ /help р░Яр▒Ир░кр▒Н р░Ър▒Зр░пр░Вр░бр░┐!"
}
STATUS_MSGS = {
    "en": "*тЬЕ Your Current Settings:*\n\nЁЯМР *Language:* {language}\nЁЯУН *Location:* {location}\nЁЯФФ *Alerts:* {alerts_status}\n\nYou can update your language with /language or change your location with /location anytime.\n\nIf you'd like to manage alerts, use /myalerts or /stopalerts.\n\nЁЯТб Type /help anytime to see all commands.",
    "hi": "*тЬЕ рдЖрдкрдХреА рд╡рд░реНрддрдорд╛рди рд╕реЗрдЯрд┐рдВрдЧреНрд╕:*\n\nЁЯМР *рднрд╛рд╖рд╛:* {language}\nЁЯУН *рд╕реНрдерд╛рди:* {location}\nЁЯФФ *рдЕрд▓рд░реНрдЯреНрд╕:* {alerts_status}\n\nрдЖрдк /language рд╕реЗ рднрд╛рд╖рд╛ рдпрд╛ /location рд╕реЗ рд╕реНрдерд╛рди рдХрднреА рднреА рдмрджрд▓ рд╕рдХрддреЗ рд╣реИрдВред\n\nрдЕрд▓рд░реНрдЯреНрд╕ рдкреНрд░рдмрдВрдзрд┐рдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП /myalerts рдпрд╛ /stopalerts рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред\n\nЁЯТб рд╕рднреА рдХрдорд╛рдВрдбреНрд╕ рдХреЗ рд▓рд┐рдП рдХрднреА рднреА /help рдЯрд╛рдЗрдк рдХрд░реЗрдВред",
    "ta": "*тЬЕ роЙроЩрпНроХро│рпН родро▒рпНрокрпЛродрпИроп роЕроорпИрокрпНрокрпБроХро│рпН:*\n\nЁЯМР *роорпКро┤ро┐:* {language}\nЁЯУН *роЗроЯроорпН:* {location}\nЁЯФФ *роОроЪрпНроЪро░ро┐роХрпНроХрпИроХро│рпН:* {alerts_status}\n\n/language роорпВро▓роорпН роорпКро┤ро┐ропрпИ роЕро▓рпНро▓родрпБ /location роорпВро▓роорпН роЗроЯродрпНродрпИ роОрокрпНрокрпЛродрпБ ро╡рпЗрогрпНроЯрпБрооро╛ройро╛ро▓рпБроорпН рооро╛ро▒рпНро▒ро▓ро╛роорпН.\n\nроОроЪрпНроЪро░ро┐роХрпНроХрпИроХро│рпИ роиро┐ро░рпНро╡роХро┐роХрпНроХ /myalerts роЕро▓рпНро▓родрпБ /stopalerts рокропройрпНрокроЯрпБродрпНродро╡рпБроорпН.\n\nЁЯТб роЕройрпИродрпНродрпБ роХроЯрпНроЯро│рпИроХро│рпИропрпБроорпН рокро╛ро░рпНроХрпНроХ роОрокрпНрокрпЛродрпБ ро╡рпЗрогрпНроЯрпБрооро╛ройро╛ро▓рпБроорпН /help роОройродрпН родроЯрпНроЯроЪрпНроЪрпБ роЪрпЖропрпНропро╡рпБроорпН!",
    "te": "*тЬЕ р░ор▒А р░кр▒Нр░░р░╕р▒Нр░др▒Бр░д р░╕р▒Жр░Яр▒Нр░Яр░┐р░Вр░Чр▒Бр░▓р▒Б:*\n\nЁЯМР *р░нр░╛р░╖:* {language}\nЁЯУН *р░╕р▒Нр░ер░╛р░ир░В:* {location}\nЁЯФФ *р░╣р▒Жр░Ър▒Нр░Ър░░р░┐р░Хр░▓р▒Б:* {alerts_status}\n\nр░ор▒Ар░░р▒Б /language р░др▒Л р░нр░╛р░╖р░ир▒Б р░▓р▒Зр░жр░╛ /location р░др▒Л р░╕р▒Нр░ер░╛р░ир░╛р░ир▒Нр░ир░┐ р░Ор░кр▒Нр░кр▒Бр░бр▒Ир░ир░╛ р░ор░╛р░░р▒Нр░Ър░╡р░Ър▒Нр░Ър▒Б.\n\nр░╣р▒Жр░Ър▒Нр░Ър░░р░┐р░Хр░▓р░ир▒Б р░ир░┐р░░р▒Нр░╡р░╣р░┐р░Вр░Ър░бр░╛р░ир░┐р░Хр░┐ /myalerts р░▓р▒Зр░жр░╛ /stopalerts р░Йр░кр░пр▒Лр░Чр░┐р░Вр░Ър░Вр░бр░┐.\n\nЁЯТб р░Ер░ир▒Нр░ир░┐ р░Жр░жр▒Зр░╢р░╛р░▓р░ир▒Б р░Ър▒Вр░бр░Яр░╛р░ир░┐р░Хр░┐ р░Ор░кр▒Нр░кр▒Бр░бр▒Ир░ир░╛ /help р░Яр▒Ир░кр▒Н р░Ър▒Зр░пр░Вр░бр░┐!",
    "bn": "*тЬЕ ржЖржкржирж╛рж░ ржмрж░рзНрждржорж╛ржи рж╕рзЗржЯрж┐ржВрж╕:*\n\nЁЯМР *ржнрж╛рж╖рж╛:* {language}\nЁЯУН *ржЕржмрж╕рзНржерж╛ржи:* {location}\nЁЯФФ *рж╕рждрж░рзНржХрждрж╛:* {alerts_status}\n\n/language ржжрж┐ржпрж╝рзЗ ржнрж╛рж╖рж╛ ржмрж╛ /location ржжрж┐ржпрж╝рзЗ ржЕржмрж╕рзНржерж╛ржи ржпрзЗржХрзЛржирзЛ рж╕ржоржпрж╝ ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рждрзЗ ржкрж╛рж░рзЗржиред\n\nрж╕рждрж░рзНржХрждрж╛ ржкрж░рж┐ржЪрж╛рж▓ржирж╛ ржХрж░рждрзЗ /myalerts ржмрж╛ /stopalerts ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржиред\n\nЁЯТб рж╕ржм ржХржорж╛ржирзНржб ржжрзЗржЦрждрзЗ ржпрзЗржХрзЛржирзЛ рж╕ржоржпрж╝ /help ржЯрж╛ржЗржк ржХрж░рзБржи!"
}
ABOUT_MSGS = {
    "en": "*тД╣я╕П About this bot:*\n\nThis is a *Smart Farming Assistant* designed to support farmers with region-specific alerts, crop disease diagnosis, and expert farming advice тАФ all in your local language.\n\nтЬЕ Features:\n- Region-aware risk and weather alerts\n- AI chat for personalized crop queries\n- Photo-based disease detection\n- Multilingual support (English, рд╣рд┐рдВрджреА, родрооро┐ро┤рпН, р░др▒Жр░▓р▒Бр░Чр▒Б, ржмрж╛ржВрж▓рж╛)\n\nЁЯСитАНЁЯМ╛ Our mission: Help farmers stay informed, reduce losses, and improve yields using AI.\n\nIf you have any questions, just type /help anytime!",
    "hi": "*тД╣я╕П рдЗрд╕ рдмреЛрдЯ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ:*\n\nрдпрд╣ рдПрдХ *рд╕реНрдорд╛рд░реНрдЯ рдлрд╛рд░реНрдорд┐рдВрдЧ рдЕрд╕рд┐рд╕реНрдЯреЗрдВрдЯ* рд╣реИ рдЬреЛ рдХрд┐рд╕рд╛рдиреЛрдВ рдХреЛ рдХреНрд╖реЗрддреНрд░-рд╡рд┐рд╢рд┐рд╖реНрдЯ рдЕрд▓рд░реНрдЯ, рдлрд╕рд▓ рд░реЛрдЧ рдирд┐рджрд╛рди рдФрд░ рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ рдХреГрд╖рд┐ рд╕рд▓рд╛рд╣ рдЙрдирдХреЗ рд╕реНрдерд╛рдиреАрдп рднрд╛рд╖рд╛ рдореЗрдВ рдкреНрд░рджрд╛рди рдХрд░рддрд╛ рд╣реИред\n\nтЬЕ рд╡рд┐рд╢реЗрд╖рддрд╛рдПрдБ:\n- рдХреНрд╖реЗрддреНрд░-рдЖрдзрд╛рд░рд┐рдд рдЬреЛрдЦрд┐рдо рдФрд░ рдореМрд╕рдо рдЕрд▓рд░реНрдЯ\n- рд╡реНрдпрдХреНрддрд┐рдЧрдд рдлрд╕рд▓ рдкреНрд░рд╢реНрдиреЛрдВ рдХреЗ рд▓рд┐рдП рдПрдЖрдИ рдЪреИрдЯ\n- рдлреЛрдЯреЛ-рдЖрдзрд╛рд░рд┐рдд рд░реЛрдЧ рдкрд╣рдЪрд╛рди\n- рдмрд╣реБрднрд╛рд╖реА рд╕рдорд░реНрдерди (English, рд╣рд┐рдВрджреА, родрооро┐ро┤рпН, р░др▒Жр░▓р▒Бр░Чр▒Б, ржмрж╛ржВрж▓рж╛)\n\nЁЯСитАНЁЯМ╛ рд╣рдорд╛рд░рд╛ рдорд┐рд╢рди: рдХрд┐рд╕рд╛рдиреЛрдВ рдХреЛ рд╕реВрдЪрд┐рдд рд░рдЦрдирд╛, рдиреБрдХрд╕рд╛рди рдХрдо рдХрд░рдирд╛ рдФрд░ рдЙрдкрдЬ рдмрдврд╝рд╛рдирд╛ред\n\nрдХреЛрдИ рднреА рд╕рд╡рд╛рд▓ рд╣реЛ рддреЛ рдХрднреА рднреА /help рдЯрд╛рдЗрдк рдХрд░реЗрдВ!",
    "ta": "*тД╣я╕П роЗроирпНрод рокро╛роЯрпНроЯрпИрокрпН рокро▒рпНро▒ро┐:*\n\nроЗродрпБ роТро░рпБ *ро╕рпНрооро╛ро░рпНроЯрпН ро╡ро┐ро╡роЪро╛роп роЙродро╡ро┐ропро╛ро│ро░рпН*, ро╡ро┐ро╡роЪро╛ропро┐роХро│рпБроХрпНроХрпБ рокроХрпБродро┐ роЪро╛ро░рпНроирпНрод роОроЪрпНроЪро░ро┐роХрпНроХрпИроХро│рпН, рокропро┐ро░рпН роирпЛропрпН роХрогрпНроЯро▒ро┐родро▓рпН рооро▒рпНро▒рпБроорпН роиро┐рокрпБрогро░рпН ро╡ро┐ро╡роЪро╛роп роЖро▓рпЛроЪройрпИроХро│рпН роЕро╡ро░рпНроХро│ро┐ройрпН роЙро│рпНро│рпВро░рпН роорпКро┤ро┐ропро┐ро▓рпН ро╡ро┤роЩрпНроХрокрпНрокроЯрпБроХро┐ро▒родрпБ.\n\nтЬЕ роЕроорпНроЪроЩрпНроХро│рпН:\n- рокроХрпБродро┐ роЪро╛ро░рпНроирпНрод роЕрокро╛ропроорпН рооро▒рпНро▒рпБроорпН ро╡ро╛ройро┐ро▓рпИ роОроЪрпНроЪро░ро┐роХрпНроХрпИроХро│рпН\n- родройро┐рокрпНрокропройрпН рокропро┐ро░рпН роХрпЗро│рпНро╡ро┐роХро│рпБроХрпНроХро╛рой роПроР роЙро░рпИропро╛роЯро▓рпН\n- рокрпБроХрпИрокрпНрокроЯ роЕроЯро┐рокрпНрокроЯрпИропро┐ро▓ро╛рой роирпЛропрпН роХрогрпНроЯро▒ро┐родро▓рпН\n- рокройрпНроорпКро┤ро┐ роЖродро░ро╡рпБ (English, рд╣рд┐рдВрджреА, родрооро┐ро┤рпН, р░др▒Жр░▓р▒Бр░Чр▒Б, ржмрж╛ржВрж▓рж╛)\n\nЁЯСитАНЁЯМ╛ роОроЩрпНроХро│рпН роирпЛроХрпНроХроорпН: ро╡ро┐ро╡роЪро╛ропро┐роХро│рпИ родроХро╡ро▓ро▒ро┐роирпНродро╡ро░рпНроХро│ро╛роХ ро╡рпИродрпНродро┐ро░рпБродрпНродро▓рпН, роЗро┤рокрпНрокрпБроХро│рпИ роХрпБро▒рпИродрпНродро▓рпН рооро▒рпНро▒рпБроорпН ро╡ро┐ро│рпИроЪрпНроЪро▓рпИ роорпЗроорпНрокроЯрпБродрпНродрпБродро▓рпН.\n\nроОроирпНрод роХрпЗро│рпНро╡ро┐ропрпБроорпН роЗро░рпБроирпНродро╛ро▓рпН роОрокрпНрокрпЛродрпБ ро╡рпЗрогрпНроЯрпБрооро╛ройро╛ро▓рпБроорпН /help роОройродрпН родроЯрпНроЯроЪрпНроЪрпБ роЪрпЖропрпНропро╡рпБроорпН!",
    "te": "*тД╣я╕П р░И р░мр░╛р░Яр▒Н р░Чр▒Бр░░р░┐р░Вр░Ър░┐:*\n\nр░Зр░жр░┐ р░Тр░Х *р░╕р▒Нр░ор░╛р░░р▒Нр░Яр▒Н р░лр░╛р░░р▒Нр░ор░┐р░Вр░Чр▒Н р░Ер░╕р░┐р░╕р▒Нр░Яр▒Жр░Вр░Яр▒Н*, р░░р▒Ир░др▒Бр░▓р░Хр▒Б р░кр▒Нр░░р░╛р░Вр░др▒Ар░п р░╣р▒Жр░Ър▒Нр░Ър░░р░┐р░Хр░▓р▒Б, р░кр░Вр░Я р░╡р▒Нр░пр░╛р░зр░┐ р░ир░┐р░░р▒Нр░зр░╛р░░р░г р░ор░░р░┐р░пр▒Б р░ир░┐р░кр▒Бр░гр▒Бр░▓ р░╡р▒Нр░пр░╡р░╕р░╛р░п р░╕р░▓р░╣р░╛ р░╡р░╛р░░р░┐ р░╕р▒Нр░ер░╛р░ир░┐р░Х р░нр░╛р░╖р░▓р▒Л р░Ер░Вр░жр░┐р░╕р▒Нр░др▒Бр░Вр░жр░┐.\n\nтЬЕ р░▓р░Хр▒Нр░╖р░гр░╛р░▓р▒Б:\n- р░кр▒Нр░░р░╛р░Вр░др▒Ар░п р░кр▒Нр░░р░ор░╛р░жр░В р░ор░░р░┐р░пр▒Б р░╡р░╛р░др░╛р░╡р░░р░г р░╣р▒Жр░Ър▒Нр░Ър░░р░┐р░Хр░▓р▒Б\n- р░╡р▒Нр░пр░Хр▒Нр░др░┐р░Чр░д р░кр░Вр░Я р░кр▒Нр░░р░╢р▒Нр░ир░▓р░Хр▒Б AI р░Ър░╛р░Яр▒Н\n- р░лр▒Лр░Яр▒Л р░Жр░зр░╛р░░р░┐р░д р░╡р▒Нр░пр░╛р░зр░┐ р░ир░┐р░░р▒Нр░зр░╛р░░р░г\n- р░мр░╣р▒Бр░нр░╛р░╖р░╛ р░ор░жр▒Нр░жр░др▒Б (English, рд╣рд┐рдВрджреА, родрооро┐ро┤рпН, р░др▒Жр░▓р▒Бр░Чр▒Б, ржмрж╛ржВрж▓рж╛)\n\nЁЯСитАНЁЯМ╛ р░ор░╛ р░▓р░Хр▒Нр░╖р▒Нр░пр░В: р░░р▒Ир░др▒Бр░▓р░ир▒Б р░╕р░ор░╛р░Ър░╛р░░р░В р░Хр░▓р░┐р░Чр░┐р░ир░╡р░╛р░░р░┐р░Чр░╛ р░Йр░Вр░Ър░бр░В, р░ир░╖р▒Нр░Яр░╛р░▓р░ир▒Б р░др░Чр▒Нр░Чр░┐р░Вр░Ър░бр░В р░ор░░р░┐р░пр▒Б р░жр░┐р░Чр▒Бр░мр░бр░┐р░ир░┐ р░кр▒Жр░Вр░Ър░бр░В.\n\nр░Пр░╡р▒Ир░ир░╛ р░кр▒Нр░░р░╢р▒Нр░ир░▓р▒Б р░Йр░Вр░Яр▒З р░Ор░кр▒Нр░кр▒Бр░бр▒Ир░ир░╛ /help р░Яр▒Ир░кр▒Н р░Ър▒Зр░пр░Вр░бр░┐!",
    "bn": "*тД╣я╕П р░Зр░жр░┐ р░мр░Яр▒Н р░Чр▒Бр░░р░┐р░Вр░Ър░┐:*\n\nр░Зр░жр░┐ р░Тр░Х *р░╕р▒Нр░ор░╛р░░р▒Нр░Яр▒Н р░лр░╛р░░р▒Нр░ор░┐р░Вр░Чр▒Н р░Ер░╕р░┐р░╕р▒Нр░Яр▒Жр░Вр░Яр▒Н*, р░пр░╛р░Хр▒Нр░╖р░┐р░Хр░╛р░░р▒Бр░▓р░Хр▒Б р░кр▒Нр░░р░╛р░Вр░др▒Ар░п р░╕р░др░░р▒Нр░Хр░др░▓р▒Б, р░кр░Вр░Я р░╡р▒Нр░пр░╛р░зр░┐ р░ир░┐р░░р▒Нр░зр░╛р░░р░г р░ор░░р░┐р░пр▒Б р░ир░┐р░кр▒Бр░гр▒Бр░▓ р░╡р▒Нр░пр░╡р░╕р░╛р░п р░╕р░▓р░╣р░╛ р░Ер░╡р░░р▒Бр░▓ р░╕р▒Нр░ер░╛р░ир░┐р░Х р░нр░╛р░╖р░▓р▒Л р░Ер░Вр░жр░┐р░╕р▒Нр░др▒Бр░Вр░жр░┐.\n\nтЬЕ р░▓р░Хр▒Нр░╖р░гр░╛р░▓р▒Б:\n- р░кр▒Нр░░р░╛р░Вр░др▒Ар░п р░кр▒Нр░░р░ор░╛р░жр░В р░ор░░р░┐р░пр▒Б р░╡р░╛р░др░╛р░╡р░░р░г р░╕р░др░░р▒Нр░Хр░др░▓р▒Б\n- р░мр░┐р░Вр░жр▒Бр░╡р▒Бр░▓р▒Б р░кр▒Нр░░р░╢р▒Нр░ир░▓р░Хр▒Б AI р░Ър░╛р░Яр▒Н\n- р░лр▒Лр░Яр▒Л р░Жр░зр░╛р░░р░┐р░д р░╡р▒Нр░пр░╛р░зр░┐ р░ир░┐р░░р▒Нр░зр░╛р░░р░г\n- р░мр░╣р▒Бр░нр░╛р░╖р░╛ р░ор░жр▒Нр░жр░др▒Б (English, рд╣рд┐рдВрджреА, родрооро┐ро┤рпН, р░др▒Жр░▓р▒Бр░Чр▒Б, ржмрж╛ржВрж▓рж╛)\n\nЁЯСитАНЁЯМ╛ р░ор░╛ р░▓р░Хр▒Нр░╖р▒Нр░пр░В: р░░р▒Ир░др▒Бр░▓р░ир▒Б р░╕р░ор░╛р░Ър░╛р░░р░В р░Хр░▓р░┐р░Чр░┐р░ир░╡р░╛р░░р░┐р░Чр░╛ р░Йр░Вр░Ър░бр░В, р░ир░╖р▒Нр░Яр░╛р░▓р░ир▒Б р░др░Чр▒Нр░Чр░┐р░Вр░Ър░бр░В р░ор░░р░┐р░пр▒Б р░жр░┐р░Чр▒Бр░мр░бр░┐р░ир░┐ р░кр▒Жр░Вр░Ър░бр░В.\n\nр░Пр░╡р▒Ир░ир░╛ р░кр▒Нр░░р░╢р▒Нр░ир░▓р▒Б р░Йр░Вр░Яр▒З р░Ор░кр▒Нр░кр▒Бр░бр▒Ир░ир░╛ /help р░Яр▒Ир░кр▒Н р░Ър▒Зр░пр░Вр░бр░┐!"
}

def register(bot, user_languages, user_data=None):
    @bot.message_handler(commands=['start'])
    def send_welcome(message: Message):
        info = user_data.get(message.chat.id, {}) if user_data else {}
        lang = info.get("language", "en")
        if info.get("onboarded"):
            send_help(message)
            return
        if not info.get("language"):
            kb = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
            kb.add("English", "рд╣рд┐рдиреНрджреА", "родрооро┐ро┤рпН", "р░др▒Жр░▓р▒Бр░Чр▒Б", "ржмрж╛ржВрж▓рж╛")
            msg = WELCOME_MSGS.get(lang, WELCOME_MSGS["en"])
            bot.send_message(message.chat.id, msg, reply_markup=kb)
        elif not info.get("location"):
            prompt = LOCATION_PROMPTS.get(lang, LOCATION_PROMPTS["en"])
            bot.send_message(message.chat.id, prompt)
        else:
            # If both are set but onboarded is not, set it now
            user_data[message.chat.id]["onboarded"] = True
            save_user_data(user_data)
            from telegram_bot import bot as bot_module
            bot_module.last_alert_time[message.chat.id] = time.time()
            send_help(message)

    @bot.message_handler(func=lambda msg: msg.text in ["English", "рд╣рд┐рдиреНрджреА", "родрооро┐ро┤рпН", "р░др▒Жр░▓р▒Бр░Чр▒Б", "ржмрж╛ржВрж▓рж╛"])
    def save_language(message):
        lang_code = get_lang_from_text(message.text)
        set_user_lang(message.chat.id, lang_code, user_languages)
        if user_data is not None:
            user_data[message.chat.id] = user_data.get(message.chat.id, {})
            user_data[message.chat.id]["language"] = lang_code
            save_user_data(user_data)
        bot.send_message(message.chat.id, f"тЬЕ Language set to {message.text}")
        # Prompt for location after language
        bot.send_message(message.chat.id, "ЁЯУН Please tell me your farm location (district or region) in the format: Location: <your location>")

    # Accept any text as location if language is set 
    @bot.message_handler(func=lambda msg: user_data and user_data.get(msg.chat.id, {}).get("language") and not user_data.get(msg.chat.id, {}).get("location") and msg.text and not msg.text.startswith("/"))
    def save_location_onboarding(message: Message):
        location = message.text.strip()
        lang = user_data[message.chat.id]["language"]
        csv_path = f"backend/DATASETS/risk_data_{lang}.csv"
        try:
            df = pd.read_csv(csv_path)
            regions = df["Region"].astype(str).tolist()
            regions_norm = [r.strip().lower() for r in regions]
        except Exception as e:
            bot.reply_to(message, "тЭМ Could not load region data. Please try again later.")
            print(f"CSV load error: {e}")
            return
        # Fuzzy match
        match, score = process.extractOne(location.lower(), regions_norm)
        if score >= 80:
            idx = regions_norm.index(match)
            canonical_region = regions[idx]
            if user_data is not None:
                user_data[message.chat.id] = user_data.get(message.chat.id, {})
                user_data[message.chat.id]["location"] = canonical_region
                user_data[message.chat.id]["alerts"] = True  # Enable alerts only after location is set
                user_data[message.chat.id]["onboarded"] = True
                save_user_data(user_data)
                from telegram_bot import bot as bot_module
                # Delay region alerts by 30 seconds after onboarding
                import threading
                def set_alert_time():
                    import time
                    time.sleep(30)
                    bot_module.last_alert_time[message.chat.id] = time.time()
                threading.Thread(target=set_alert_time, daemon=True).start()
            lang = user_data[message.chat.id].get("language", "en")
            msg = LOCATION_CONFIRMED_MSGS.get(lang, LOCATION_CONFIRMED_MSGS["en"]).format(location=canonical_region)
            bot.reply_to(message, msg)
            # Do NOT send welcome or help message here
        else:
            idx = regions_norm.index(match)
            suggestion = regions[idx]
            bot.reply_to(
                message,
                LOCATION_NOT_FOUND_MSGS.get(lang, LOCATION_NOT_FOUND_MSGS["en"])
            )
            return

    # Accept any text as location after /location command
    @bot.message_handler(func=lambda msg: hasattr(msg, 'reply_to_message') and msg.reply_to_message and msg.reply_to_message.text and ("farm location" in msg.reply_to_message.text or "Location:" in msg.reply_to_message.text))
    def update_location(message: Message):
        location = message.text.strip()
        lang = user_data[message.chat.id]["language"]
        csv_path = f"backend/DATASETS/risk_data_{lang}.csv"
        try:
            df = pd.read_csv(csv_path)
            regions = df["Region"].astype(str).tolist()
            regions_norm = [r.strip().lower() for r in regions]
        except Exception as e:
            bot.reply_to(message, "тЭМ Could not load region data. Please try again later.")
            print(f"CSV load error: {e}")
            return
        # Fuzzy match
        match, score = process.extractOne(location.lower(), regions_norm)
        if score >= 80:
            idx = regions_norm.index(match)
            canonical_region = regions[idx]
            if user_data is not None:
                user_data[message.chat.id]["location"] = canonical_region
                user_data[message.chat.id]["onboarded"] = True
                save_user_data(user_data)
            bot.reply_to(message, f"тЬЕ Location updated to: {canonical_region}")
        else:
            idx = regions_norm.index(match)
            suggestion = regions[idx]
            bot.reply_to(message, f"тЭМ Location not found. Did you mean: {suggestion}? Available regions include: {', '.join(regions[:5])} ...")
            return

    # Block all other actions until setup is complete
    @bot.message_handler(func=lambda msg: not (user_data and user_data.get(msg.chat.id, {}).get("onboarded")))
    def block_until_setup(message: Message):
        info = user_data.get(message.chat.id, {}) if user_data else {}
        print(f"[DEBUG] block_until_setup triggered for chat_id={message.chat.id}, info={info}")
        if not info.get("language"):
            kb = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
            kb.add("English", "рд╣рд┐рдиреНрджреА", "родрооро┐ро┤рпН", "р░др▒Жр░▓р▒Бр░Чр▒Б", "ржмрж╛ржВрж▓рж╛")
            bot.send_message(message.chat.id, "ЁЯМР Please select your language:", reply_markup=kb)
        elif not info.get("location"):
            bot.send_message(message.chat.id, "ЁЯУН Please tell me your farm location (district or region) in the format: Location: <your location>")

    @bot.message_handler(commands=['location'])
    def ask_location(message: Message):
        bot.reply_to(message, "ЁЯУН Please type your farm location (district or region):")

    @bot.message_handler(commands=['status'])
    def status(message: Message):
        info = user_data.get(message.chat.id, {}) if user_data else {}
        lang_map = {"en": "English", "hi": "Hindi", "ta": "Tamil", "te": "Telugu", "bn": "Bengali"}
        lang = info.get("language", "en")
        location = info.get("location", "Not set")
        alerts = info.get("alerts", True)
        alerts_str = "ON" if alerts else "OFF"
        status_msg = STATUS_MSGS.get(lang, STATUS_MSGS["en"]).format(
            language=lang_map.get(lang, "English"),
            location=location,
            alerts_status=alerts_str
        )
        bot.reply_to(message, status_msg, parse_mode="Markdown")

    @bot.message_handler(commands=['about'])
    def about(message: Message):
        info = user_data.get(message.chat.id, {}) if user_data else {}
        lang = info.get("language", "en")
        about_msg = ABOUT_MSGS.get(lang, ABOUT_MSGS["en"])
        bot.reply_to(message, about_msg, parse_mode="Markdown")

    @bot.message_handler(commands=['help'])
    def send_help(message: Message):
        info = user_data.get(message.chat.id, {}) if user_data else {}
        lang = info.get("language", "en")
        help_msg = HELP_MSGS.get(lang, HELP_MSGS["en"])
        sent = bot.reply_to(message, help_msg, parse_mode="Markdown")
        try:
            bot.pin_chat_message(message.chat.id, sent.message_id)
        except Exception as e:
            print(f"Could not pin help message: {e}")

    @bot.message_handler(commands=['alert'])
    def send_alerts(message: Message):
        if user_data is None:
            bot.reply_to(message, "User data not available.")
            return
        count = 0
        for user_id, info in user_data.items():
            lang = info.get("language", "en")
            location = info.get("location")
            if not location:
                continue
            csv_path = f"backend/DATASETS/risk_data_{lang}.csv"
            try:
                df = pd.read_csv(csv_path)
                # Normalize both user location and region names for comparison
                user_loc_norm = location.strip().lower()
                df["Region_norm"] = df["Region"].astype(str).str.strip().str.lower()
                row = df[df["Region_norm"] == user_loc_norm]
                if not row.empty:
                    risk = row.iloc[0]["Overall_Risk"]
                    suggestion = row.iloc[0]["Suggestion"]
                    msg = f"тЪая╕П Alert for {location}:\nRisk: {risk}\nAdvice: {suggestion}"
                    bot.send_message(user_id, msg)
                    count += 1
            except Exception as e:
                print(f"Alert error for user {user_id}: {e}")
        bot.reply_to(message, f"тЬЕ Sent alerts to {count} users.")
