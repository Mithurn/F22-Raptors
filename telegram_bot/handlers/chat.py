from backend.gemini_chat import ask_crop_doctor
from services.lang_utils import get_user_lang
from telebot.types import Message
import sys
import os
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "../..")))

# Import distress detection
from backend.distress_ai import is_distress_message
from dotenv import load_dotenv
load_dotenv()

ADMIN_USER_ID = int(os.getenv('ADMIN_USER_ID', '0'))

# Optional: helpline info
HELPLINE_INFO = "If you need urgent help, please call the National Helpline: 1-800-123-4567."

LANGUAGE_OPTIONS = ["English", "рд╣рд┐рдиреНрджреА", "родрооро┐ро┤рпН", "р░др▒Жр░▓р▒Бр░Чр▒Б", "ржмрж╛ржВрж▓рж╛"]

# Multilingual distress messages
DISTRESS_MSGS = {
    "en": "ЁЯЪи It looks like you might be facing some difficulties. If you need urgent help, please reach out to someone you trust or your local agricultural officer. Remember, youтАЩre not alone тАФ weтАЩre here to support you!",
    "hi": "ЁЯЪи рдРрд╕рд╛ рд▓рдЧрддрд╛ рд╣реИ рдХрд┐ рдЖрдк рдХреБрдЫ рдХрдард┐рдирд╛рдЗрдпреЛрдВ рдХрд╛ рд╕рд╛рдордирд╛ рдХрд░ рд░рд╣реЗ рд╣реИрдВред рдпрджрд┐ рдЖрдкрдХреЛ рддрддреНрдХрд╛рд▓ рд╕рд╣рд╛рдпрддрд╛ рдХреА рдЖрд╡рд╢реНрдпрдХрддрд╛ рд╣реИ, рддреЛ рдХреГрдкрдпрд╛ рдЕрдкрдиреЗ рд╡рд┐рд╢реНрд╡рд╕рдиреАрдп рд╡реНрдпрдХреНрддрд┐ рдпрд╛ рд╕реНрдерд╛рдиреАрдп рдХреГрд╖рд┐ рдЕрдзрд┐рдХрд╛рд░реА рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВред рдпрд╛рдж рд░рдЦреЗрдВ, рдЖрдк рдЕрдХреЗрд▓реЗ рдирд╣реАрдВ рд╣реИрдВ тАФ рд╣рдо рдЖрдкрдХреА рдорджрдж рдХреЗ рд▓рд┐рдП рдпрд╣рд╛рдБ рд╣реИрдВ!",
    "ta": "ЁЯЪи роирпАроЩрпНроХро│рпН роЪро┐ро▓ роЪро┐ро░роороЩрпНроХро│рпИ роОродро┐ро░рпНроХрпКро│рпНроХро┐ро▒рпАро░рпНроХро│рпН рокрпЛро▓рпН родрпЖро░ро┐роХро┐ро▒родрпБ. роЙроЯройроЯро┐ роЙродро╡ро┐ родрпЗро╡рпИрокрпНрокроЯрпНроЯро╛ро▓рпН, роироорпНрокроХрооро╛рой роТро░рпБро╡ро░рпИ роЕро▓рпНро▓родрпБ роЙроЩрпНроХро│рпН роЙро│рпНро│рпВро░рпН ро╡ро┐ро╡роЪро╛роп роЕродро┐роХро╛ро░ро┐ропрпИ роЕрогрпБроХро╡рпБроорпН. роирпАроЩрпНроХро│рпН родройро┐ропро╛роХ роЗро▓рпНро▓рпИ тАФ роиро╛роЩрпНроХро│рпН роЙроЩрпНроХро│рпИ роЖродро░ро┐роХрпНроХ роЗро░рпБроХрпНроХро┐ро▒рпЛроорпН!",
    "te": "ЁЯЪи р░ор▒Ар░░р▒Б р░Хр▒Кр░ир▒Нр░ир░┐ р░Хр░╖р▒Нр░Яр░╛р░▓р░ир▒Б р░Ор░жр▒Бр░░р▒Нр░Хр▒Кр░Вр░Яр▒Бр░ир▒Нр░ир░Яр▒Нр░▓р▒Б р░Хр░ир░┐р░кр░┐р░╕р▒Нр░др▒Лр░Вр░жр░┐. р░др░Хр▒Нр░╖р░г р░╕р░╣р░╛р░пр░В р░Ер░╡р░╕р░░р░ор▒Ир░др▒З, р░жр░пр░Ър▒Зр░╕р░┐ р░ор▒А р░ир░ор▒Нр░ор░Хр░ор▒Ир░и р░╡р▒Нр░пр░Хр▒Нр░др░┐р░ир░┐ р░▓р▒Зр░жр░╛ р░╕р▒Нр░ер░╛р░ир░┐р░Х р░╡р▒Нр░пр░╡р░╕р░╛р░п р░Ер░зр░┐р░Хр░╛р░░р░┐р░ир░┐ р░╕р░Вр░кр▒Нр░░р░жр░┐р░Вр░Ър░Вр░бр░┐. р░ор▒Ар░░р▒Б р░Тр░Вр░Яр░░р░┐р░Чр░╛ р░▓р▒Зр░░р▒Б тАФ р░ор▒Зр░ор▒Б р░ор▒Ар░Хр▒Б р░ор░жр▒Нр░жр░др▒Бр░Чр░╛ р░Йр░ир▒Нр░ир░╛р░ор▒Б!",
    "bn": "ЁЯЪи ржоржирзЗ рж╣ржЪрзНржЫрзЗ ржЖржкржирж┐ ржХрж┐ржЫрзБ рж╕ржорж╕рзНржпрж╛рж░ рж╕ржорзНржорзБржЦрзАржи рж╣ржЪрзНржЫрзЗржиред ржЬрж░рзБрж░рж┐ рж╕рж╣рж╛ржпрж╝рждрж╛рж░ ржкрзНрж░ржпрж╝рзЛржЬржи рж╣рж▓рзЗ, ржжржпрж╝рж╛ ржХрж░рзЗ ржЖржкржирж╛рж░ ржмрж┐рж╢рзНржмрж╕рзНржд ржХрж╛ржЙржХрзЗ ржмрж╛ рж╕рзНржерж╛ржирзАржпрж╝ ржХрзГрж╖рж┐ ржХрж░рзНржоржХрж░рзНрждрж╛рж░ рж╕рж╛ржерзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржиред ржоржирзЗ рж░рж╛ржЦржмрзЗржи, ржЖржкржирж┐ ржПржХрж╛ ржиржи тАФ ржЖржорж░рж╛ ржЖржкржирж╛ржХрзЗ рж╕рж╣рж╛ржпрж╝рждрж╛ ржХрж░рждрзЗ ржПржЦрж╛ржирзЗ ржЖржЫрж┐!"
}

def register(bot, user_languages, user_data=None):
    @bot.message_handler(func=lambda msg: msg.text.lower() in ["hi", "hello", "hey"])
    def greet(message: Message):
        bot.reply_to(message, "ЁЯСЛ Hello! How can I help you with your crops today?")

    @bot.message_handler(func=lambda msg: msg.text and not msg.text.startswith('/') and msg.text not in LANGUAGE_OPTIONS)
    def chat_with_crop_doctor(message: Message):
        print(f"[DEBUG] chat_with_crop_doctor called for user {message.chat.id}: {message.text}")
        # Only process chat if onboarding is complete
        info = user_data.get(message.chat.id, {}) if user_data else {}
        if not info.get("onboarded"):
            return  # Let onboarding/location handlers process
        print(f"[DEBUG] Checking for distress: {message.text}")
        # Distress detection
        is_distress, reason = is_distress_message(message.text)
        print(f"[DEBUG] is_distress={is_distress}, reason={reason}")
        if is_distress:
            # Alert admin
            try:
                print(f"[DEBUG] Sending distress alert to admin: ADMIN_USER_ID={ADMIN_USER_ID}, user_id={message.chat.id}")
                alert_msg = (
                    f"ЁЯЪи Distress Alert!\n"
                    f"Farmer {getattr(message.from_user, 'first_name', 'Unknown')} (@{getattr(message.from_user, 'username', 'N/A')}) in {info.get('location', 'Unknown')} may need urgent support.\n"
                    f"Message:\n\"{message.text}\""
                )
                bot.send_message(ADMIN_USER_ID, alert_msg)
            except Exception as e:
                print(f"[ERROR] Failed to alert admin: {e}")
            # Empathetic auto-reply to user (multilingual)
            lang = info.get("language", "en")
            reply = DISTRESS_MSGS.get(lang, DISTRESS_MSGS["en"])
            bot.send_message(message.chat.id, reply)
            return
        # Normal chat flow
        lang = get_user_lang(message.chat.id, user_languages)
        answer = ask_crop_doctor(message.text, lang)
        reply = (
            f"ЁЯдЦ HereтАЩs what I found:\n{answer}\nLet me know if you'd like more details!"
        )
        bot.send_message(message.chat.id, reply)
